print(aa)
master$anio <- as.integer(master$anio)
aa <- data.frame()
for(x in 1:length(ww)){
myCols <- (c(ww[x], "anio"))
colNums <- match(myCols,names(master))
a  <- (master  %>% select(colNums) %>% filter(master[x+1]=='1') %>%
summarise(mode_anio= mlv(anio, method='mfv')[['M']]))
aa <- rbind.data.frame(aa,a)
}
print(aa)
master
head(master)
ww
ss <- data.frame()
for(i in 1:length(ww)){
s <- subset(master, ww[i], ww[i] == 1)
mlv(s)
ss <- rbind.data.frame(ss,s)
}
ww[1]
head(master)
ss <- data.frame()
for(i in 1:length(ww)){
s <- subset(master, 8+ww[i], ww[i] == 1)
mlv(s)
ss <- rbind.data.frame(ss,s)
}
s <- subset(master, "c_2", "c_2" == 1)
ss <- data.frame()
for(i in 1:length(ww)){
s <- subset(master, master$ww[i], ww[i] == 1)
mlv(s)
ss <- rbind.data.frame(ss,s)
}
subset(master, c_2, c_2==1)
ss <- data.frame()
for(i in 1:length(ww)){
s <- subset(master, master$ww[i], master$ww[i] == 1)
mlv(s)
ss <- rbind.data.frame(ss,s)
}
ss <- data.frame()
for(i in 1:length(ww)){
s <- subset(master$ww[i], master$ww[i] == 1)
mlv(s)
ss <- rbind.data.frame(ss,s)
}
i <- 1
s <- subset(master$ww[i], master$ww[i] == 1)
s
master$ww[1]
ss <- data.frame()
for(i in 1:length(ww)){
s <- subset(master$anio, master$ww[i], master$ww[i] == 1)
mlv(s)
ss <- rbind.data.frame(ss,s)
}
head(master)
s <- subset(master, master[i+8] == 1)
s
mlv(s$anio)
mode <- mlv(s$anio)
mode
mode$M
ww
ss <- data.frame()
for(i in 1:length(ww)){
s <- subset(master, master[i+8] == 1)
mode <- mlv(s$anio)
ss <- rbind.data.frame(ss,mode$M)
}
ss
warnings
warnings()
ss
yy <- data.frame()
for(i in 1:length(ww)){
y <- subset(master, master[i+8] == 1)
mode <- mlv(s$sem)
yy <- rbind.data.frame(yy,mode$M)
}
master$sem <- substring(master$id,4)
for(i in 1:length(master$sem)){
if(nchar(master$sem[i])==6){
a <- substring(master$sem[i],1,2)
master$sem[i] <- a
} else{
a <- substring(master$sem[i],1,1)
master$sem[i] <- a
}
}
yy <- data.frame()
for(i in 1:length(ww)){
y <- subset(master, master[i+8] == 1)
mode <- mlv(s$sem)
yy <- rbind.data.frame(yy,mode$M)
}
yy <- data.frame()
for(i in 1:length(ww)){
y <- subset(master, master[i+8] == 1)
mode <- mlv(y$sem)
yy <- rbind.data.frame(yy,mode$M)
}
yy
master$sem <- substring(master$id,4)
for(i in 1:length(master$sem)){
if(nchar(master$sem[i])==6){
a <- substring(master$sem[i],1,2)
master$sem[i] <- a
} else{
a <- substring(master$sem[i],1,1)
master$sem[i] <- a
}
}
head(master)
yy <- data.frame()
for(i in 1:length(ww)){
y <- subset(master, master[i+8] == 1)
mode <- mlv(y$sem)
yy <- rbind.data.frame(yy,mode$M)
}
i <- 1
y <- subset(master, master[i+8] == 1)
yy <- data.frame()
y
mode <- mlv(y$sem)
y$sem
y$sem[1]
y$sem[1] - 1
master$sem <- as.numeric(substring(master$id,4))
for(i in 1:length(master$sem)){
if(nchar(master$sem[i])==6){
a <- substring(master$sem[i],1,2)
master$sem[i] <- a
} else{
a <- substring(master$sem[i],1,1)
master$sem[i] <- a
}
}
master$sem
yy <- data.frame()
for(i in 1:length(ww)){
y <- subset(master, master[i+8] == 1)
mode <- mlv(y$sem)
yy <- rbind.data.frame(yy,mode$M)
}
i=1
master$sem <- as.numeric(substring(master$id,4))
head(master)
master$sem <- substring(master$id,4)
for(i in 1:length(master$sem)){
if(nchar(master$sem[i])==6){
a <- substring(master$sem[i],1,2)
master$sem[i] <- as.numeric(a)
} else{
a <- substring(master$sem[i],1,1)
master$sem[i] <- as.numeric(a)
}
}
yy <- data.frame()
for(i in 1:length(ww)){
y <- subset(master, master[i+8] == 1)
mode <- mlv(y$sem)
yy <- rbind.data.frame(yy,mode$M)
}
i=1
y <- subset(master, master[i+8] == 1)
typeof(y$sem)
master$sem <- as.numeric(substring(master$id,4))
typeof(master$sem)
master$sem <- floor(as.numeric(substring(master$id,4))/10000)
head(master)
yy <- data.frame()
for(i in 1:length(ww)){
y <- subset(master, master[i+8] == 1)
mode <- mlv(y$sem)
yy <- rbind.data.frame(yy,mode$M)
}
yy <- data.frame()
for(i in 1:length(ww)){
y <- subset(master, master[i+8] == 1)
mode <- mlv(y$sem)
yy <- rbind.data.frame(yy,mode$M)
}
yy
unique(master$sem)
yy <- data.frame()
for(i in 1:length(ww)){
y <- subset(master, master[i+8] == 1)
mode <- round(mlv(y$sem))
yy <- rbind.data.frame(yy,mode$M)
}
yy <- data.frame()
for(i in 1:length(ww)){
y <- subset(master, master[i+8] == 1)
mode <- mlv(y$sem)
yy <- rbind.data.frame(yy,as.integer(mode$M))
}
yy
bb$tooltip <- paste0("NOX_prom: ",round(bb$NOX_prom,2), " ppb, PM10_prom: ",round(bb$PM10_prom,2), " mm, PM2.5_prom: ",round(bb$PM2.5_prom,2), " mm", "moda a単o:",ss, "moda semana:", yy)
tooltip <- as.array(bb$tooltip)
tooltip
bb$tooltip <- paste0("NOX_prom: ",round(bb$NOX_prom,2), " ppb, PM10_prom: ",round(bb$PM10_prom,2), " mm, PM2.5_prom: ",round(bb$PM2.5_prom,2), " mm", " moda a単o:",ss, " moda semana:", yy)
tooltip <- as.array(bb$tooltip)
#install.packages('gplots')
library('gplots')
#vamos a ordenar los colores segun la variable "var_color"
var_color <- bb$PM10_prom
a <- col2hex(colorRampPalette(c("red", "blue"))(clusters))
a <- a[order(var_color)]
c <- paste(shQuote(a,type="cmd"), collapse=", ")
b <- paste(shQuote(order(var_color),type="cmd"), collapse=", ")
##############################
#KEPLER
nodes.n <- n_clusters
nodes.size<- as.numeric(summary_cluster)
#nodes.tooltips <- tooltip
nodes.tooltips <- paste("Grupo:", 1:nodes.n, tooltip)
nodes.names <- 1:nodes.n
nodes.color <- as.character(1:nodes.n)
# ------- AHORA TENEMOS QUE CREAR UN JSON DE ESO -----------------------------
adj.matrix <- adj_matrix
aux_mat <- data.frame()
for(i in 1:nodes.n) {
for(j in 1:nodes.n){
if(adj.matrix[i, j]!=0) {
aux_mat <- rbind(aux_mat, data.frame(source=i-1, target=j-1, value=adj.matrix[i, j]))
}
}
}
linksJSON <- toJSON(aux_mat)
nodesJSON <- toJSON(data.frame(color=nodes.color, group=nodes.size, name=nodes.names, tooltip=nodes.tooltips))
graphJSON <- sprintf("{\"nodes\": %s, \"links\": %s}", nodesJSON, linksJSON)
#head(graphJSON)
# ------------  CREAMOS EL HTML ----------------------------------------------------------
htmlFile <- readLines('/home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/index.html')
#htmlFile <- readLines("www/index.html")
graph_def_line <- which(grepl("graph =", htmlFile))
#htmlFile[graph_def_line] <- sprintf("graph = %s;", graphJSON)
htmlFile[graph_def_line] <- sprintf("graph = %s;", graphJSON)
#writeLines(htmlFile, "www/index.html")
writeLines(htmlFile, '/home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/index.html')
######colores FALTA CAMBIAR COLOR POR VARIABLE
#modificar el index
#setwd('..')
setwd("/home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/")
htmlFile <- readLines('index.html')
numbers_line <- which(grepl("domain", htmlFile))
colors_line <- which(grepl("range", htmlFile))
htmlFile[numbers_line] <- paste0('.domain([',b,'])')
htmlFile[numbers_line+1] <- paste0('.range([',c,']);')
writeLines(htmlFile,'index.html')
###
browseURL("file:////home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/index.html")
dim(bb)
dim(ss)
ss
head(ss)
names(yy) <- "sem"
names(ss) <- "anio"
bb$tooltip <- paste0("NOX_prom: ",round(bb$NOX_prom,2), " ppb, PM10_prom: ",round(bb$PM10_prom,2), " mm, PM2.5_prom: ",round(bb$PM2.5_prom,2), " mm", " moda a単o:",ss$anio, " moda semana:", yy$sem)
tooltip <- as.array(bb$tooltip)
#install.packages('gplots')
library('gplots')
#vamos a ordenar los colores segun la variable "var_color"
var_color <- bb$PM10_prom
a <- col2hex(colorRampPalette(c("red", "blue"))(clusters))
a <- a[order(var_color)]
c <- paste(shQuote(a,type="cmd"), collapse=", ")
b <- paste(shQuote(order(var_color),type="cmd"), collapse=", ")
##############################
#KEPLER
nodes.n <- n_clusters
nodes.size<- as.numeric(summary_cluster)
#nodes.tooltips <- tooltip
nodes.tooltips <- paste("Grupo:", 1:nodes.n, tooltip)
nodes.names <- 1:nodes.n
nodes.color <- as.character(1:nodes.n)
# ------- AHORA TENEMOS QUE CREAR UN JSON DE ESO -----------------------------
adj.matrix <- adj_matrix
aux_mat <- data.frame()
for(i in 1:nodes.n) {
for(j in 1:nodes.n){
if(adj.matrix[i, j]!=0) {
aux_mat <- rbind(aux_mat, data.frame(source=i-1, target=j-1, value=adj.matrix[i, j]))
}
}
}
linksJSON <- toJSON(aux_mat)
nodesJSON <- toJSON(data.frame(color=nodes.color, group=nodes.size, name=nodes.names, tooltip=nodes.tooltips))
graphJSON <- sprintf("{\"nodes\": %s, \"links\": %s}", nodesJSON, linksJSON)
#head(graphJSON)
# ------------  CREAMOS EL HTML ----------------------------------------------------------
htmlFile <- readLines('/home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/index.html')
#htmlFile <- readLines("www/index.html")
graph_def_line <- which(grepl("graph =", htmlFile))
#htmlFile[graph_def_line] <- sprintf("graph = %s;", graphJSON)
htmlFile[graph_def_line] <- sprintf("graph = %s;", graphJSON)
#writeLines(htmlFile, "www/index.html")
writeLines(htmlFile, '/home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/index.html')
######colores FALTA CAMBIAR COLOR POR VARIABLE
#modificar el index
#setwd('..')
setwd("/home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/")
htmlFile <- readLines('index.html')
numbers_line <- which(grepl("domain", htmlFile))
colors_line <- which(grepl("range", htmlFile))
htmlFile[numbers_line] <- paste0('.domain([',b,'])')
htmlFile[numbers_line+1] <- paste0('.range([',c,']);')
writeLines(htmlFile,'index.html')
###
browseURL("file:////home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/index.html")
bb$tooltip <- paste0("NOX_prom: ",round(bb$NOX_prom,2), " ppb, PM10_prom: ",round(bb$PM10_prom,2), " mm, PM2.5_prom: ",round(bb$PM2.5_prom,2), " mm", " moda a単o:",ss$anio, ", moda semana:", yy$sem)
tooltip <- as.array(bb$tooltip)
#install.packages('gplots')
library('gplots')
#vamos a ordenar los colores segun la variable "var_color"
var_color <- yy$sem
a <- col2hex(colorRampPalette(c("red", "blue"))(clusters))
a <- a[order(var_color)]
c <- paste(shQuote(a,type="cmd"), collapse=", ")
b <- paste(shQuote(order(var_color),type="cmd"), collapse=", ")
##############################
#KEPLER
nodes.n <- n_clusters
nodes.size<- as.numeric(summary_cluster)
#nodes.tooltips <- tooltip
nodes.tooltips <- paste("Grupo:", 1:nodes.n, tooltip)
nodes.names <- 1:nodes.n
nodes.color <- as.character(1:nodes.n)
# ------- AHORA TENEMOS QUE CREAR UN JSON DE ESO -----------------------------
adj.matrix <- adj_matrix
aux_mat <- data.frame()
for(i in 1:nodes.n) {
for(j in 1:nodes.n){
if(adj.matrix[i, j]!=0) {
aux_mat <- rbind(aux_mat, data.frame(source=i-1, target=j-1, value=adj.matrix[i, j]))
}
}
}
linksJSON <- toJSON(aux_mat)
nodesJSON <- toJSON(data.frame(color=nodes.color, group=nodes.size, name=nodes.names, tooltip=nodes.tooltips))
graphJSON <- sprintf("{\"nodes\": %s, \"links\": %s}", nodesJSON, linksJSON)
#head(graphJSON)
# ------------  CREAMOS EL HTML ----------------------------------------------------------
htmlFile <- readLines('/home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/index.html')
#htmlFile <- readLines("www/index.html")
graph_def_line <- which(grepl("graph =", htmlFile))
#htmlFile[graph_def_line] <- sprintf("graph = %s;", graphJSON)
htmlFile[graph_def_line] <- sprintf("graph = %s;", graphJSON)
#writeLines(htmlFile, "www/index.html")
writeLines(htmlFile, '/home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/index.html')
######colores FALTA CAMBIAR COLOR POR VARIABLE
#modificar el index
#setwd('..')
setwd("/home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/")
htmlFile <- readLines('index.html')
numbers_line <- which(grepl("domain", htmlFile))
colors_line <- which(grepl("range", htmlFile))
htmlFile[numbers_line] <- paste0('.domain([',b,'])')
htmlFile[numbers_line+1] <- paste0('.range([',c,']);')
writeLines(htmlFile,'index.html')
###
browseURL("file:////home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/index.html")
bb$tooltip <- paste0("NOX_prom: ",round(bb$NOX_prom,2), " ppb, PM10_prom: ",round(bb$PM10_prom,2), " mm, PM2.5_prom: ",round(bb$PM2.5_prom,2), " mm", " moda a単o:",ss$anio, ", moda semana:", yy$sem)
tooltip <- as.array(bb$tooltip)
#install.packages('gplots')
library('gplots')
#vamos a ordenar los colores segun la variable "var_color"
var_color <- bb$NOX_prom
a <- col2hex(colorRampPalette(c("red", "blue"))(clusters))
a <- a[order(var_color)]
c <- paste(shQuote(a,type="cmd"), collapse=", ")
b <- paste(shQuote(order(var_color),type="cmd"), collapse=", ")
##############################
#KEPLER
nodes.n <- n_clusters
nodes.size<- as.numeric(summary_cluster)
#nodes.tooltips <- tooltip
nodes.tooltips <- paste("Grupo:", 1:nodes.n, tooltip)
nodes.names <- 1:nodes.n
nodes.color <- as.character(1:nodes.n)
# ------- AHORA TENEMOS QUE CREAR UN JSON DE ESO -----------------------------
adj.matrix <- adj_matrix
aux_mat <- data.frame()
for(i in 1:nodes.n) {
for(j in 1:nodes.n){
if(adj.matrix[i, j]!=0) {
aux_mat <- rbind(aux_mat, data.frame(source=i-1, target=j-1, value=adj.matrix[i, j]))
}
}
}
linksJSON <- toJSON(aux_mat)
nodesJSON <- toJSON(data.frame(color=nodes.color, group=nodes.size, name=nodes.names, tooltip=nodes.tooltips))
graphJSON <- sprintf("{\"nodes\": %s, \"links\": %s}", nodesJSON, linksJSON)
#head(graphJSON)
# ------------  CREAMOS EL HTML ----------------------------------------------------------
htmlFile <- readLines('/home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/index.html')
#htmlFile <- readLines("www/index.html")
graph_def_line <- which(grepl("graph =", htmlFile))
#htmlFile[graph_def_line] <- sprintf("graph = %s;", graphJSON)
htmlFile[graph_def_line] <- sprintf("graph = %s;", graphJSON)
#writeLines(htmlFile, "www/index.html")
writeLines(htmlFile, '/home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/index.html')
######colores FALTA CAMBIAR COLOR POR VARIABLE
#modificar el index
#setwd('..')
setwd("/home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/")
htmlFile <- readLines('index.html')
numbers_line <- which(grepl("domain", htmlFile))
colors_line <- which(grepl("range", htmlFile))
htmlFile[numbers_line] <- paste0('.domain([',b,'])')
htmlFile[numbers_line+1] <- paste0('.range([',c,']);')
writeLines(htmlFile,'index.html')
###
browseURL("file:////home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/index.html")
var_color <- bb$PM2.5_prom
a <- col2hex(colorRampPalette(c("red", "blue"))(clusters))
a <- a[order(var_color)]
c <- paste(shQuote(a,type="cmd"), collapse=", ")
b <- paste(shQuote(order(var_color),type="cmd"), collapse=", ")
##############################
#KEPLER
nodes.n <- n_clusters
nodes.size<- as.numeric(summary_cluster)
#nodes.tooltips <- tooltip
nodes.tooltips <- paste("Grupo:", 1:nodes.n, tooltip)
nodes.names <- 1:nodes.n
nodes.color <- as.character(1:nodes.n)
# ------- AHORA TENEMOS QUE CREAR UN JSON DE ESO -----------------------------
adj.matrix <- adj_matrix
aux_mat <- data.frame()
for(i in 1:nodes.n) {
for(j in 1:nodes.n){
if(adj.matrix[i, j]!=0) {
aux_mat <- rbind(aux_mat, data.frame(source=i-1, target=j-1, value=adj.matrix[i, j]))
}
}
}
linksJSON <- toJSON(aux_mat)
nodesJSON <- toJSON(data.frame(color=nodes.color, group=nodes.size, name=nodes.names, tooltip=nodes.tooltips))
graphJSON <- sprintf("{\"nodes\": %s, \"links\": %s}", nodesJSON, linksJSON)
#head(graphJSON)
# ------------  CREAMOS EL HTML ----------------------------------------------------------
htmlFile <- readLines('/home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/index.html')
#htmlFile <- readLines("www/index.html")
graph_def_line <- which(grepl("graph =", htmlFile))
#htmlFile[graph_def_line] <- sprintf("graph = %s;", graphJSON)
htmlFile[graph_def_line] <- sprintf("graph = %s;", graphJSON)
#writeLines(htmlFile, "www/index.html")
writeLines(htmlFile, '/home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/index.html')
######colores FALTA CAMBIAR COLOR POR VARIABLE
#modificar el index
#setwd('..')
setwd("/home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/")
htmlFile <- readLines('index.html')
numbers_line <- which(grepl("domain", htmlFile))
colors_line <- which(grepl("range", htmlFile))
htmlFile[numbers_line] <- paste0('.domain([',b,'])')
htmlFile[numbers_line+1] <- paste0('.range([',c,']);')
writeLines(htmlFile,'index.html')
###
browseURL("file:////home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/index.html")
var_color <- bb$PM2.5_prom
a <- col2hex(colorRampPalette(c("red", "blue"))(clusters))
a <- a[order(var_color)]
c <- paste(shQuote(a,type="cmd"), collapse=", ")
b <- paste(shQuote(order(var_color),type="cmd"), collapse=", ")
##############################
#KEPLER
nodes.n <- n_clusters
nodes.size<- as.numeric(summary_cluster)
#nodes.tooltips <- tooltip
nodes.tooltips <- paste("Grupo:", 1:nodes.n, tooltip)
nodes.names <- 1:nodes.n
nodes.color <- as.character(1:nodes.n)
# ------- AHORA TENEMOS QUE CREAR UN JSON DE ESO -----------------------------
adj.matrix <- adj_matrix
aux_mat <- data.frame()
for(i in 1:nodes.n) {
for(j in 1:nodes.n){
if(adj.matrix[i, j]!=0) {
aux_mat <- rbind(aux_mat, data.frame(source=i-1, target=j-1, value=adj.matrix[i, j]))
}
}
}
linksJSON <- toJSON(aux_mat)
nodesJSON <- toJSON(data.frame(color=nodes.color, group=nodes.size, name=nodes.names, tooltip=nodes.tooltips))
graphJSON <- sprintf("{\"nodes\": %s, \"links\": %s}", nodesJSON, linksJSON)
#head(graphJSON)
# ------------  CREAMOS EL HTML ----------------------------------------------------------
htmlFile <- readLines('/home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/index.html')
#htmlFile <- readLines("www/index.html")
graph_def_line <- which(grepl("graph =", htmlFile))
#htmlFile[graph_def_line] <- sprintf("graph = %s;", graphJSON)
htmlFile[graph_def_line] <- sprintf("graph = %s;", graphJSON)
#writeLines(htmlFile, "www/index.html")
writeLines(htmlFile, '/home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/index.html')
######colores FALTA CAMBIAR COLOR POR VARIABLE
#modificar el index
#setwd('..')
setwd("/home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/")
htmlFile <- readLines('index.html')
numbers_line <- which(grepl("domain", htmlFile))
colors_line <- which(grepl("range", htmlFile))
htmlFile[numbers_line] <- paste0('.domain([',b,'])')
htmlFile[numbers_line+1] <- paste0('.range([',c,']);')
writeLines(htmlFile,'index.html')
###
browseURL("file:////home/denny/itam/topologia/proyecto_final/ManifoldLearning/www/index.html")
save.image("~/itam/topologia/proyecto_final/ambiente.RData")
